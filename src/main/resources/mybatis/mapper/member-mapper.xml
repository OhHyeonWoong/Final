<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member-mapper">

	<resultMap id="MemberResult" type="Member">
		<id property="member_id" column="member_id"/>
		<result property="member_pw" column="member_pw"/>
		<result property="member_name" column="member_name"/>
		<result property="member_email" column="member_email"/>
		<result property="member_address" column="member_address"/>
		<result property="member_phone" column="member_phone"/>
		<result property="member_regident_number" column="member_regident_number"/>
		<result property="member_write_count" column="member_write_count"/>
		<result property="member_enroll_date" column="member_enroll_date"/>
		<result property="member_lastlogin" column="member_lastlogin"/>
		<result property="member_lastpassword" column="member_lastpassword"/>		
		<result property="member_yellowcard" column="member_yellowcard"/>		
		<result property="member_status" column="member_status"/>		
		<result property="member_renamephoto" column="member_renamephoto"/>		
		<result property="member_cash" column="member_cash"/>		
		<result property="member_accesstoken" column="member_accesstoken" />
		<result property="member_refreshtoken" column="member_refreshtoken" />
		<result property="member_keyword_count" column="member_keyword_count" />	
		<result property="MEMBER_KAKAOIDPK" column="MEMBER_KAKAOIDPK" />	
	</resultMap>
	
	<resultMap id="Memberandscore" type="Memberandscore">
		<id property="member_id" column="member_id"/>
		<result property="member_pw" column="member_pw"/>
		<result property="member_name" column="member_name"/>
		<result property="member_email" column="member_email"/>
		<result property="member_address" column="member_address"/>
		<result property="member_phone" column="member_phone"/>
		<result property="member_regident_number" column="member_regident_number"/>
		<result property="member_write_count" column="member_write_count"/>
		<result property="member_enroll_date" column="member_enroll_date"/>
		<result property="member_lastlogin" column="member_lastlogin"/>
		<result property="member_lastpassword" column="member_lastpassword"/>		
		<result property="member_yellowcard" column="member_yellowcard"/>		
		<result property="member_status" column="member_status"/>		
		<result property="member_renamephoto" column="member_renamephoto"/>		
		<result property="member_cash" column="member_cash"/>		
		<result property="member_accesstoken" column="member_accesstoken" />
		<result property="member_refreshtoken" column="member_refreshtoken" />
		<result property="SCORE_BUY" column="SCORE_BUY" />	
		<result property="SCORE_BUY_COUNT" column="SCORE_BUY_COUNT" />	
		<result property="SCORE_SELL" column="SCORE_SELL" />	
		<result property="SCORE_SELL_COUNT" column="SCORE_SELL_COUNT" />	
		<result property="SCORE_SELL_RATE" column="SCORE_SELL_RATE" />	
		<result property="MEMBER_KAKAOIDPK" column="MEMBER_KAKAOIDPK" />	
	</resultMap>
	
	
	
<select id="searchmemberInfobyBoardNo" parameterType="int" resultType="Memberandscore">
select * from member,score where 
member.member_id = (select AGENCY_WRITER from AGENCY where AGENCY_NO =#{pk}) and
score.member_id= member.member_id
</select>

<select id="searchmemberInfobyBoardNo1" parameterType="int" resultType="Memberandscore">
select * from member,score where 
member.member_id = (select TRADE_APPLICANT from TRADE_DETAIL where AGENCY_NO =#{pk}) and
score.member_id= member.member_id
</select>


	<select id="loginCheck" parameterType="Member" resultMap="MemberResult">
		<![CDATA[
			select * from member where member_id = #{member_id} and
			member_pw = #{member_pw}
		]]>
	</select>
	
	<select id="emailCheck" parameterType="string" resultType="Member">
		<![CDATA[
			select * from member where member_email = #{tomail}
		]]>
	</select>
	
	<select id="findId" parameterType="Member" resultType="Member">
		<![CDATA[
			select * from member where member_name = #{member_name} and member_email = #{member_email} 
			and member_pw = #{member_pw}
		]]>
	</select>
	
	<select id="selectIDYNCheck" parameterType="string" resultType="LoginStatistics">
		<![CDATA[
			select *
			from login_statistics
			where member_id = #{member_id} and to_char(ls_date,'yy/mm/dd') = to_char(sysdate,'yy/mm/dd')
		]]>
	</select>
	
	<insert id="insertLoginStatistics" parameterType="string" flushCache="true">
		<!-- <selectKey keyProperty="memberId" resultType="string" order="BEFORE">
		   <![CDATA[
		   		select member_id from login_statistics 
		   		where member_id = #{member_id}
		   ]]>
		</selectKey>
		<if test="#{memberId} != null"> -->
			<![CDATA[
				insert into login_statistics 
				values (sysdate,#{member_id})
			]]>
		<!-- </if> -->
	</insert>
	
	<update id="fwdChange" parameterType="Member" flushCache="true" statementType="PREPARED">
		<![CDATA[
			update member set member_pw = #{member_pw} 
			where member_id = #{member_id}
		]]>
	</update>
	
	<update id="updateMember" parameterType="Member" flushCache="true">
		<![CDATA[
			update member 
			set member_renamephoto = #{member_renamephoto},
			member_pw = #{member_pw},
			member_address = #{member_address},
			member_phone = #{member_phone} 
			where member_id = #{member_id}
		]]>
	</update>
	
	<update id="updateLastLogin" parameterType="string" flushCache="true">
		<![CDATA[
			update member
			set member_lastlogin = sysdate
			where member_id = #{member_id}
		]]>
	</update>
	
	<delete id="deleteMemberOut" parameterType="string" flushCache="true">
		<![CDATA[
			delete from member
			where member_id = #{member_id}
		]]>
	</delete>
	
	<update id="updateMemberCash" parameterType="Member" flushCache="true">
		<![CDATA[
			update member
			set member_cash = #{member_cash}
			where member_id = #{member_id}
		]]>
	</update>
	
<update id="upgradeboardcount" parameterType="String">
update MEMBER set MEMBER_WRITE_COUNT = (MEMBER_WRITE_COUNT+1) where MEMBER_ID = #{memberid}
</update>

<update id="upgradekeywordcount" parameterType="String">
update MEMBER set MEMBER_KEYWORD_COUNT = (MEMBER_KEYWORD_COUNT+1) where MEMBER_ID = #{memberid}
</update>

<select id="idDuplicateCheck" parameterType="String" resultType="String">
		<![CDATA[
		select MEMBER_ID from MEMBER 
		where MEMBER_ID=#{member_id}
		]]>
</select>

<select id="emailDuplicateCheck" parameterType="String" resultType="String">
		<![CDATA[
		select MEMBER_EMAIL from MEMBER 
		where MEMBER_EMAIL=#{member_email}
		]]>
	</select>
	<insert id="memberInsert" parameterType="Member" flushCache="true" statementType="PREPARED">
	<![CDATA[
	insert into member values (
	#{member_id},
	#{member_pw},
	#{member_name},
	#{member_email},
	#{member_address},
	#{member_phone},
	#{member_regident_number},
	default,
	default,
	default,
	default,
	default,
	1,
	#{member_renamephoto},
	default,
	default,
	default,
	default
	)
	]]>
	</insert>
	
	<select id="checkusercash" parameterType="String" resultType="int">
	select MEMBER_CASH from MEMBER where MEMBER_ID=#{memberid}
	</select>
	
	<update id="decreaseCash" parameterType="Hashmap">
	update member 
	set 
	MEMBER_CASH = ((select MEMBER_CASH from member where MEMBER_ID =#{memberid})-#{price})
	where MEMBER_ID =#{memberid}
	</update>
	<select id="adminMemberList"  resultType="MemberList">
	<![CDATA[
	select MEMBER_ID,
	MEMBER_NAME,
	MEMBER_EMAIL,
	MEMBER_REGIDENT_NUMBER from (select rownum as a, list.* from (select * from MEMBER order by MEMBER_NAME) list)
	where  a>=1 and a<= 10 
	]]>
	</select>
	<select id="getmemberinfobykakaopk" parameterType="int" resultType="Member">
	select * from member where MEMBER_KAKAOIDPK=#{parseInt}
	</select>
	<update id="updatetoken" parameterType="Hashmap">
	update member set
	MEMBER_REFRESHTOKEN=#{refresh_token},
	MEMBER_ACCESSTOKEN=#{access_token}
	where MEMBER_KAKAOIDPK = #{kakaopk}
	</update>
	
	<update id="updatekakaoinfo"  parameterType="Hashmap">
	update member set
	MEMBER_REFRESHTOKEN=#{refresh_token},
	MEMBER_ACCESSTOKEN=#{access_token},
	 MEMBER_KAKAOIDPK = #{kakaopk}
	 where MEMBER_ID =#{memberid}
	</update>
	
	<select id="searchAPPLICANTInfobyBoardNo" parameterType="int" resultType="Memberandscore">
	select member.* from member , 
	TRADE_DETAIL where TRADE_DETAIL.AGENCY_NO=#{pk} 
	and TRADE_DETAIL.TRADE_APPLICANT=member.MEMBER_ID
	</select>
	
	<select id="searchRESERVATIONInfobyBoardNo" parameterType="int" resultType="Memberandscore">
	select member.* from member , TRADE_DETAIL where TRADE_DETAIL.AGENCY_NO=#{pk} and TRADE_DETAIL.TRADE_RESERVATION=member.MEMBER_ID
	</select>
	
	<update id="updateaccessToken" parameterType="Hashmap" >
	update member set
	MEMBER_ACCESSTOKEN = #{key}
	where MEMBER_ID = #{member_id}
	</update>
	
	<insert id="insertScore" parameterType="member">
	<![CDATA[
	insert into SCORE VALUES(
	#{member_id},
	default,
	default,
	default,
	default,
	0
	)
	]]>
	</insert>
	
	
	
	<update id="paycash" parameterType="Hashmap" >
	update member set
     MEMBER_CASH = (select MEMBER_CASH from member where MEMBER_ID = #{APPLICANT})+#{payment}
    where MEMBER_ID = #{APPLICANT}
	</update>

	<insert id="insertpaylog"  parameterType="Hashmap" >
    insert into paylog values((select max(PAYLOG_NO)+1 from PAYLOG),#{order}, #{APPLICANT},#{payment},sysdate);
	</insert>
	
	</mapper>