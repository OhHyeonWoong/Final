<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- datasource 등록은 서버 연동과 같이 DB 연결이 같이 이루어져야 하기 때문에
		root-context.xml 에서 설정한다. -->
	<!-- DataSource 등록 : db연결 정보 -->
	<!-- destroy-method 속성은 DB 연결에 대한 세션을 자동으로 close
		하라는 뜻임 -->		

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		<property name="username" value="final" />
		<property name="password" value="final" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

	<!-- <bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">   
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<property name="username" value="final" />
		<property name="password" value="final" />
		<property name="defaultAutoCommit" value="false" />
	</bean> -->
	  
	<!-- Spring과 MyBatis 연동 설정 -->
    <bean id="sqlSession"
    	class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="configLocation" value="classpath:mybatis-config.xml" />
    	<property name="dataSource" ref="dataSource" /><!-- 이미 만들어져있는 놈은 ref로 만들어진 id를 참조함, name은 내 맘대로 지은 이름 -->
    </bean>
    
    <!-- template객체 생성을 할 때 생성자 쪽에 sqlSession을 넣어주겠다. -->
    <bean class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg ref="sqlSession" />
    </bean>
    
    <!-- 메일 전용 bean -->
    <bean id="mailSender" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="pjlee9212@gmail.com" />
      <property name="password" value="Asdf1020?" />
      <property name="javaMailProperties">
         <props>  
               <prop key="mail.transport.protocol">smtp</prop>
               <prop key="mail.smtp.auth">true</prop>
               <prop key="mail.smtp.starttls.enable">true</prop>
               <prop key="mail.debug">true</prop>
         </props>
      </property>
   </bean>  
    
    <!-- dataSource(JDBCTemplate에서 Connection)와 transaction을 연결 -->
    <bean id="transactionManager"
    	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- dao에서 필요한 시점에서 commit/rollback 이 구동되게 설정 =
    	aop 설정하기 (원하는 시점에 commit,rollback이 실행되게 하는 것) 
    	namespace에 서 aop 와 tx 체크 (네임스페이스에 목록이 나오지 않으면, 라이브러리가 다운이 되지 않은 것이다) 
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes><!-- 어떤 메소드에서 commit,rollback을 구동시킬 것인지 설정 -->
    	<tx:method name="select*" read-only="true"
    		rollback-for="Exception" /> <!-- 어떤 예외상황이 발생하면 Exception으로 보내라 -->
    	<tx:method name="insert*" rollback-for="Exception" />
    	<tx:method name="update*" rollback-for="Exception" />
    	<tx:method name="delete*" rollback-for="Exception" />
    </tx:attributes>
    </tx:advice>
    <tx:annotation-driven transaction-manager="transactionManager" /><!-- annotation으로 작동시키기 위한 설정 -->
    
    <aop:config proxy-target-class="true">
    	<!-- pointcout : commit,rollback의 실행시점을 지정하는 역할을 함 - execution()에 설정한 대로~ -->
    	<aop:pointcut id="serviceMethod" expression="execution(* com.kh.goodluck.**.model.service.*ServiceImpl.*(..))" />
    	<!-- Impl.*() : Impl이 가지는 모든 메소드 -->
    	<aop:advisor advice-ref="txAdvice" id="transactionAdvisor"
    		pointcut-ref="serviceMethod" />
    </aop:config>
</beans>
